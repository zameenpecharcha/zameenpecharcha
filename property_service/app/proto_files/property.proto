syntax = "proto3";

package property;

// Property Type Enum
enum PropertyType {
    APARTMENT = 0;
    VILLA = 1;
    HOUSE = 2;
    LAND = 3;
}

// Property Status Enum
enum PropertyStatus {
    ACTIVE = 0;
    INACTIVE = 1;
    SOLD = 2;
    RENTED = 3;
}

// Property Message
message Property {
    string property_id = 1;
    string user_id = 2;
    string title = 3;
    string description = 4;
    double price = 5;
    string location = 6;
    PropertyType property_type = 7;
    PropertyStatus status = 8;
    int32 bedrooms = 9;
    int32 bathrooms = 10;
    double area = 11;
    int32 year_built = 12;
    repeated string images = 13;
    repeated string amenities = 14;
    int64 created_at = 15;
    int64 updated_at = 16;
    int32 view_count = 17;
    double latitude = 18;
    double longitude = 19;
    string address = 20;
    string city = 21;
    string state = 22;
    string country = 23;
    string zip_code = 24;
    bool is_active = 25;
}

// Property List Message
message PropertyList {
    repeated Property properties = 1;
}

// Property Request Message
message PropertyRequest {
    string property_id = 1;
}

// Property Search Request Message
message PropertySearchRequest {
    string query = 1;
    PropertyType property_type = 2;
    double min_price = 3;
    double max_price = 4;
    string location = 5;
    int32 min_bedrooms = 6;
    int32 min_bathrooms = 7;
    double min_area = 8;
    double max_area = 9;
}

// Property Response Message
message PropertyResponse {
    bool success = 1;
    string message = 2;
    Property property = 3;
}

// Property List Response Message
message PropertyListResponse {
    bool success = 1;
    string message = 2;
    PropertyList properties = 3;
}

// Property Service Definition
service PropertyService {
    rpc CreateProperty(Property) returns (PropertyResponse) {}
    rpc GetProperty(PropertyRequest) returns (PropertyResponse) {}
    rpc UpdateProperty(Property) returns (PropertyResponse) {}
    rpc DeleteProperty(PropertyRequest) returns (PropertyResponse) {}
    rpc SearchProperties(PropertySearchRequest) returns (PropertyListResponse) {}
    rpc ListProperties(PropertyRequest) returns (PropertyListResponse) {}
    rpc IncrementViewCount(PropertyRequest) returns (PropertyResponse) {}

    // Ratings (polymorphic table - here we use rated_type='property')
    rpc CreatePropertyRating(PropertyRatingCreateRequest) returns (PropertyRatingResponse) {}
    rpc GetPropertyRatings(PropertyRequest) returns (PropertyRatingsResponse) {}

    // Followers (polymorphic table - followee_type='property')
    rpc FollowProperty(PropertyFollowRequest) returns (PropertyFollowResponse) {}
    rpc GetPropertyFollowers(PropertyRequest) returns (PropertyFollowersResponse) {}

    // Media (file path uploads)
    rpc AddPropertyMedia(PropertyMediaRequest) returns (PropertyMediaResponse) {}
} 

message PropertyRatingCreateRequest {
    int64 property_id = 1;
    int64 rated_by_user_id = 2;
    int32 rating_value = 3;
    string title = 4;
    string review = 5;
    string rating_type = 6;
    bool is_anonymous = 7;
}

message PropertyRatingResponse {
    int64 id = 1;
    int64 property_id = 2;
    int64 rated_by_user_id = 3;
    int32 rating_value = 4;
    string title = 5;
    string review = 6;
    string rating_type = 7;
    bool is_anonymous = 8;
    int64 created_at = 9;
    int64 updated_at = 10;
}

message PropertyRatingsResponse {
    repeated PropertyRatingResponse ratings = 1;
}

message PropertyFollowRequest {
    int64 user_id = 1;
    int64 property_id = 2;
    string status = 3;
}

message PropertyFollowResponse {
    int64 id = 1;
    int64 user_id = 2;
    int64 property_id = 3;
    string status = 4;
    int64 followed_at = 5;
}

message PropertyFollowersResponse {
    repeated PropertyFollowResponse followers = 1;
}

message PropertyMediaUpload {
    string file_path = 1;     // local path on server accessible filesystem
    string media_type = 2;    // e.g., 'image'
    int32 media_order = 3;
    string caption = 4;
    string content_type = 5;  // optional override
}

message PropertyMediaRequest {
    int64 property_id = 1;
    repeated PropertyMediaUpload media = 2;
}

message PropertyMediaItem {
    int64 id = 1;
    int64 property_id = 2;
    string media_type = 3;
    string media_url = 4;
    int32 media_order = 5;
    int64 media_size = 6;
    string caption = 7;
    int64 uploaded_at = 8;
}

message PropertyMediaResponse {
    bool success = 1;
    string message = 2;
    repeated PropertyMediaItem media = 3;
}
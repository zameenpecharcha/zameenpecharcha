# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import search_pb2 as search__pb2


class SearchServiceStub(object):
    """Search Service Definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.IndexProperty = channel.unary_unary(
                '/search.SearchService/IndexProperty',
                request_serializer=search__pb2.IndexPropertyRequest.SerializeToString,
                response_deserializer=search__pb2.PropertyResponse.FromString,
                )
        self.SearchProperties = channel.unary_unary(
                '/search.SearchService/SearchProperties',
                request_serializer=search__pb2.SearchPropertiesRequest.SerializeToString,
                response_deserializer=search__pb2.SearchResponse.FromString,
                )
        self.UpdatePropertyIndex = channel.unary_unary(
                '/search.SearchService/UpdatePropertyIndex',
                request_serializer=search__pb2.UpdatePropertyIndexRequest.SerializeToString,
                response_deserializer=search__pb2.PropertyResponse.FromString,
                )
        self.DeletePropertyIndex = channel.unary_unary(
                '/search.SearchService/DeletePropertyIndex',
                request_serializer=search__pb2.DeletePropertyIndexRequest.SerializeToString,
                response_deserializer=search__pb2.DeleteResponse.FromString,
                )
        self.LogSearch = channel.unary_unary(
                '/search.SearchService/LogSearch',
                request_serializer=search__pb2.LogSearchRequest.SerializeToString,
                response_deserializer=search__pb2.SearchHistoryResponse.FromString,
                )
        self.GetSearchHistory = channel.unary_unary(
                '/search.SearchService/GetSearchHistory',
                request_serializer=search__pb2.GetSearchHistoryRequest.SerializeToString,
                response_deserializer=search__pb2.SearchHistoryListResponse.FromString,
                )


class SearchServiceServicer(object):
    """Search Service Definition
    """

    def IndexProperty(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchProperties(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdatePropertyIndex(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeletePropertyIndex(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LogSearch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSearchHistory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SearchServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'IndexProperty': grpc.unary_unary_rpc_method_handler(
                    servicer.IndexProperty,
                    request_deserializer=search__pb2.IndexPropertyRequest.FromString,
                    response_serializer=search__pb2.PropertyResponse.SerializeToString,
            ),
            'SearchProperties': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchProperties,
                    request_deserializer=search__pb2.SearchPropertiesRequest.FromString,
                    response_serializer=search__pb2.SearchResponse.SerializeToString,
            ),
            'UpdatePropertyIndex': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePropertyIndex,
                    request_deserializer=search__pb2.UpdatePropertyIndexRequest.FromString,
                    response_serializer=search__pb2.PropertyResponse.SerializeToString,
            ),
            'DeletePropertyIndex': grpc.unary_unary_rpc_method_handler(
                    servicer.DeletePropertyIndex,
                    request_deserializer=search__pb2.DeletePropertyIndexRequest.FromString,
                    response_serializer=search__pb2.DeleteResponse.SerializeToString,
            ),
            'LogSearch': grpc.unary_unary_rpc_method_handler(
                    servicer.LogSearch,
                    request_deserializer=search__pb2.LogSearchRequest.FromString,
                    response_serializer=search__pb2.SearchHistoryResponse.SerializeToString,
            ),
            'GetSearchHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSearchHistory,
                    request_deserializer=search__pb2.GetSearchHistoryRequest.FromString,
                    response_serializer=search__pb2.SearchHistoryListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'search.SearchService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SearchService(object):
    """Search Service Definition
    """

    @staticmethod
    def IndexProperty(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/search.SearchService/IndexProperty',
            search__pb2.IndexPropertyRequest.SerializeToString,
            search__pb2.PropertyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SearchProperties(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/search.SearchService/SearchProperties',
            search__pb2.SearchPropertiesRequest.SerializeToString,
            search__pb2.SearchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdatePropertyIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/search.SearchService/UpdatePropertyIndex',
            search__pb2.UpdatePropertyIndexRequest.SerializeToString,
            search__pb2.PropertyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeletePropertyIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/search.SearchService/DeletePropertyIndex',
            search__pb2.DeletePropertyIndexRequest.SerializeToString,
            search__pb2.DeleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LogSearch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/search.SearchService/LogSearch',
            search__pb2.LogSearchRequest.SerializeToString,
            search__pb2.SearchHistoryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSearchHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/search.SearchService/GetSearchHistory',
            search__pb2.GetSearchHistoryRequest.SerializeToString,
            search__pb2.SearchHistoryListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

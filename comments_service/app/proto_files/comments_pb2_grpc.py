# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import comments_pb2 as comments__pb2


class CommentsServiceStub(object):
    """Comments Service Definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateComment = channel.unary_unary(
                '/comments.CommentsService/CreateComment',
                request_serializer=comments__pb2.CommentCreateRequest.SerializeToString,
                response_deserializer=comments__pb2.CommentResponse.FromString,
                )
        self.GetComment = channel.unary_unary(
                '/comments.CommentsService/GetComment',
                request_serializer=comments__pb2.CommentRequest.SerializeToString,
                response_deserializer=comments__pb2.CommentResponse.FromString,
                )
        self.UpdateComment = channel.unary_unary(
                '/comments.CommentsService/UpdateComment',
                request_serializer=comments__pb2.CommentUpdateRequest.SerializeToString,
                response_deserializer=comments__pb2.CommentResponse.FromString,
                )
        self.DeleteComment = channel.unary_unary(
                '/comments.CommentsService/DeleteComment',
                request_serializer=comments__pb2.CommentRequest.SerializeToString,
                response_deserializer=comments__pb2.CommentResponse.FromString,
                )
        self.GetCommentsByPost = channel.unary_unary(
                '/comments.CommentsService/GetCommentsByPost',
                request_serializer=comments__pb2.CommentRequest.SerializeToString,
                response_deserializer=comments__pb2.CommentListResponse.FromString,
                )
        self.GetReplies = channel.unary_unary(
                '/comments.CommentsService/GetReplies',
                request_serializer=comments__pb2.CommentRequest.SerializeToString,
                response_deserializer=comments__pb2.CommentListResponse.FromString,
                )
        self.LikeComment = channel.unary_unary(
                '/comments.CommentsService/LikeComment',
                request_serializer=comments__pb2.LikeCommentRequest.SerializeToString,
                response_deserializer=comments__pb2.CommentResponse.FromString,
                )
        self.UnlikeComment = channel.unary_unary(
                '/comments.CommentsService/UnlikeComment',
                request_serializer=comments__pb2.LikeCommentRequest.SerializeToString,
                response_deserializer=comments__pb2.CommentResponse.FromString,
                )


class CommentsServiceServicer(object):
    """Comments Service Definition
    """

    def CreateComment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetComment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateComment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteComment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCommentsByPost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetReplies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LikeComment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnlikeComment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CommentsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateComment': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateComment,
                    request_deserializer=comments__pb2.CommentCreateRequest.FromString,
                    response_serializer=comments__pb2.CommentResponse.SerializeToString,
            ),
            'GetComment': grpc.unary_unary_rpc_method_handler(
                    servicer.GetComment,
                    request_deserializer=comments__pb2.CommentRequest.FromString,
                    response_serializer=comments__pb2.CommentResponse.SerializeToString,
            ),
            'UpdateComment': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateComment,
                    request_deserializer=comments__pb2.CommentUpdateRequest.FromString,
                    response_serializer=comments__pb2.CommentResponse.SerializeToString,
            ),
            'DeleteComment': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteComment,
                    request_deserializer=comments__pb2.CommentRequest.FromString,
                    response_serializer=comments__pb2.CommentResponse.SerializeToString,
            ),
            'GetCommentsByPost': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCommentsByPost,
                    request_deserializer=comments__pb2.CommentRequest.FromString,
                    response_serializer=comments__pb2.CommentListResponse.SerializeToString,
            ),
            'GetReplies': grpc.unary_unary_rpc_method_handler(
                    servicer.GetReplies,
                    request_deserializer=comments__pb2.CommentRequest.FromString,
                    response_serializer=comments__pb2.CommentListResponse.SerializeToString,
            ),
            'LikeComment': grpc.unary_unary_rpc_method_handler(
                    servicer.LikeComment,
                    request_deserializer=comments__pb2.LikeCommentRequest.FromString,
                    response_serializer=comments__pb2.CommentResponse.SerializeToString,
            ),
            'UnlikeComment': grpc.unary_unary_rpc_method_handler(
                    servicer.UnlikeComment,
                    request_deserializer=comments__pb2.LikeCommentRequest.FromString,
                    response_serializer=comments__pb2.CommentResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'comments.CommentsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CommentsService(object):
    """Comments Service Definition
    """

    @staticmethod
    def CreateComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/comments.CommentsService/CreateComment',
            comments__pb2.CommentCreateRequest.SerializeToString,
            comments__pb2.CommentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/comments.CommentsService/GetComment',
            comments__pb2.CommentRequest.SerializeToString,
            comments__pb2.CommentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/comments.CommentsService/UpdateComment',
            comments__pb2.CommentUpdateRequest.SerializeToString,
            comments__pb2.CommentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/comments.CommentsService/DeleteComment',
            comments__pb2.CommentRequest.SerializeToString,
            comments__pb2.CommentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCommentsByPost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/comments.CommentsService/GetCommentsByPost',
            comments__pb2.CommentRequest.SerializeToString,
            comments__pb2.CommentListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetReplies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/comments.CommentsService/GetReplies',
            comments__pb2.CommentRequest.SerializeToString,
            comments__pb2.CommentListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LikeComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/comments.CommentsService/LikeComment',
            comments__pb2.LikeCommentRequest.SerializeToString,
            comments__pb2.CommentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnlikeComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/comments.CommentsService/UnlikeComment',
            comments__pb2.LikeCommentRequest.SerializeToString,
            comments__pb2.CommentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import notification_pb2 as notification__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in notification_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class NotificationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetUserNotifications = channel.unary_unary(
                '/notification.NotificationService/GetUserNotifications',
                request_serializer=notification__pb2.GetUserNotificationsRequest.SerializeToString,
                response_deserializer=notification__pb2.GetUserNotificationsResponse.FromString,
                _registered_method=True)
        self.MarkNotificationAsRead = channel.unary_unary(
                '/notification.NotificationService/MarkNotificationAsRead',
                request_serializer=notification__pb2.MarkNotificationAsReadRequest.SerializeToString,
                response_deserializer=notification__pb2.MarkNotificationAsReadResponse.FromString,
                _registered_method=True)
        self.SubscribeToLocation = channel.unary_unary(
                '/notification.NotificationService/SubscribeToLocation',
                request_serializer=notification__pb2.SubscribeToLocationRequest.SerializeToString,
                response_deserializer=notification__pb2.SubscribeToLocationResponse.FromString,
                _registered_method=True)
        self.UnsubscribeFromLocation = channel.unary_unary(
                '/notification.NotificationService/UnsubscribeFromLocation',
                request_serializer=notification__pb2.UnsubscribeFromLocationRequest.SerializeToString,
                response_deserializer=notification__pb2.UnsubscribeFromLocationResponse.FromString,
                _registered_method=True)
        self.GetUserSubscriptions = channel.unary_unary(
                '/notification.NotificationService/GetUserSubscriptions',
                request_serializer=notification__pb2.GetUserSubscriptionsRequest.SerializeToString,
                response_deserializer=notification__pb2.GetUserSubscriptionsResponse.FromString,
                _registered_method=True)
        self.CreatePostLikeNotification = channel.unary_unary(
                '/notification.NotificationService/CreatePostLikeNotification',
                request_serializer=notification__pb2.CreatePostLikeNotificationRequest.SerializeToString,
                response_deserializer=notification__pb2.Notification.FromString,
                _registered_method=True)
        self.CreatePostCommentNotification = channel.unary_unary(
                '/notification.NotificationService/CreatePostCommentNotification',
                request_serializer=notification__pb2.CreatePostCommentNotificationRequest.SerializeToString,
                response_deserializer=notification__pb2.Notification.FromString,
                _registered_method=True)
        self.CreateCommentLikeNotification = channel.unary_unary(
                '/notification.NotificationService/CreateCommentLikeNotification',
                request_serializer=notification__pb2.CreateCommentLikeNotificationRequest.SerializeToString,
                response_deserializer=notification__pb2.Notification.FromString,
                _registered_method=True)
        self.CreateCommentReplyNotification = channel.unary_unary(
                '/notification.NotificationService/CreateCommentReplyNotification',
                request_serializer=notification__pb2.CreateCommentReplyNotificationRequest.SerializeToString,
                response_deserializer=notification__pb2.Notification.FromString,
                _registered_method=True)
        self.CreateTrendingPostNotification = channel.unary_unary(
                '/notification.NotificationService/CreateTrendingPostNotification',
                request_serializer=notification__pb2.CreateTrendingPostNotificationRequest.SerializeToString,
                response_deserializer=notification__pb2.Notification.FromString,
                _registered_method=True)
        self.NotifyTrendingPosts = channel.unary_unary(
                '/notification.NotificationService/NotifyTrendingPosts',
                request_serializer=notification__pb2.NotifyTrendingPostsRequest.SerializeToString,
                response_deserializer=notification__pb2.NotifyTrendingPostsResponse.FromString,
                _registered_method=True)


class NotificationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetUserNotifications(self, request, context):
        """Get notifications for a user
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MarkNotificationAsRead(self, request, context):
        """Mark a notification as read
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeToLocation(self, request, context):
        """Subscribe to notifications for a location
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnsubscribeFromLocation(self, request, context):
        """Unsubscribe from a location
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserSubscriptions(self, request, context):
        """Get user's location subscriptions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreatePostLikeNotification(self, request, context):
        """Create notification for post like
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreatePostCommentNotification(self, request, context):
        """Create notification for post comment
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCommentLikeNotification(self, request, context):
        """Create notification for comment like
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCommentReplyNotification(self, request, context):
        """Create notification for comment reply
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTrendingPostNotification(self, request, context):
        """Create notification for trending post
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NotifyTrendingPosts(self, request, context):
        """Notify users about trending posts in their area
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NotificationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetUserNotifications': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserNotifications,
                    request_deserializer=notification__pb2.GetUserNotificationsRequest.FromString,
                    response_serializer=notification__pb2.GetUserNotificationsResponse.SerializeToString,
            ),
            'MarkNotificationAsRead': grpc.unary_unary_rpc_method_handler(
                    servicer.MarkNotificationAsRead,
                    request_deserializer=notification__pb2.MarkNotificationAsReadRequest.FromString,
                    response_serializer=notification__pb2.MarkNotificationAsReadResponse.SerializeToString,
            ),
            'SubscribeToLocation': grpc.unary_unary_rpc_method_handler(
                    servicer.SubscribeToLocation,
                    request_deserializer=notification__pb2.SubscribeToLocationRequest.FromString,
                    response_serializer=notification__pb2.SubscribeToLocationResponse.SerializeToString,
            ),
            'UnsubscribeFromLocation': grpc.unary_unary_rpc_method_handler(
                    servicer.UnsubscribeFromLocation,
                    request_deserializer=notification__pb2.UnsubscribeFromLocationRequest.FromString,
                    response_serializer=notification__pb2.UnsubscribeFromLocationResponse.SerializeToString,
            ),
            'GetUserSubscriptions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserSubscriptions,
                    request_deserializer=notification__pb2.GetUserSubscriptionsRequest.FromString,
                    response_serializer=notification__pb2.GetUserSubscriptionsResponse.SerializeToString,
            ),
            'CreatePostLikeNotification': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePostLikeNotification,
                    request_deserializer=notification__pb2.CreatePostLikeNotificationRequest.FromString,
                    response_serializer=notification__pb2.Notification.SerializeToString,
            ),
            'CreatePostCommentNotification': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePostCommentNotification,
                    request_deserializer=notification__pb2.CreatePostCommentNotificationRequest.FromString,
                    response_serializer=notification__pb2.Notification.SerializeToString,
            ),
            'CreateCommentLikeNotification': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCommentLikeNotification,
                    request_deserializer=notification__pb2.CreateCommentLikeNotificationRequest.FromString,
                    response_serializer=notification__pb2.Notification.SerializeToString,
            ),
            'CreateCommentReplyNotification': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCommentReplyNotification,
                    request_deserializer=notification__pb2.CreateCommentReplyNotificationRequest.FromString,
                    response_serializer=notification__pb2.Notification.SerializeToString,
            ),
            'CreateTrendingPostNotification': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTrendingPostNotification,
                    request_deserializer=notification__pb2.CreateTrendingPostNotificationRequest.FromString,
                    response_serializer=notification__pb2.Notification.SerializeToString,
            ),
            'NotifyTrendingPosts': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifyTrendingPosts,
                    request_deserializer=notification__pb2.NotifyTrendingPostsRequest.FromString,
                    response_serializer=notification__pb2.NotifyTrendingPostsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'notification.NotificationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('notification.NotificationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NotificationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetUserNotifications(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/notification.NotificationService/GetUserNotifications',
            notification__pb2.GetUserNotificationsRequest.SerializeToString,
            notification__pb2.GetUserNotificationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MarkNotificationAsRead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/notification.NotificationService/MarkNotificationAsRead',
            notification__pb2.MarkNotificationAsReadRequest.SerializeToString,
            notification__pb2.MarkNotificationAsReadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeToLocation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/notification.NotificationService/SubscribeToLocation',
            notification__pb2.SubscribeToLocationRequest.SerializeToString,
            notification__pb2.SubscribeToLocationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnsubscribeFromLocation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/notification.NotificationService/UnsubscribeFromLocation',
            notification__pb2.UnsubscribeFromLocationRequest.SerializeToString,
            notification__pb2.UnsubscribeFromLocationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserSubscriptions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/notification.NotificationService/GetUserSubscriptions',
            notification__pb2.GetUserSubscriptionsRequest.SerializeToString,
            notification__pb2.GetUserSubscriptionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreatePostLikeNotification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/notification.NotificationService/CreatePostLikeNotification',
            notification__pb2.CreatePostLikeNotificationRequest.SerializeToString,
            notification__pb2.Notification.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreatePostCommentNotification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/notification.NotificationService/CreatePostCommentNotification',
            notification__pb2.CreatePostCommentNotificationRequest.SerializeToString,
            notification__pb2.Notification.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateCommentLikeNotification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/notification.NotificationService/CreateCommentLikeNotification',
            notification__pb2.CreateCommentLikeNotificationRequest.SerializeToString,
            notification__pb2.Notification.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateCommentReplyNotification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/notification.NotificationService/CreateCommentReplyNotification',
            notification__pb2.CreateCommentReplyNotificationRequest.SerializeToString,
            notification__pb2.Notification.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateTrendingPostNotification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/notification.NotificationService/CreateTrendingPostNotification',
            notification__pb2.CreateTrendingPostNotificationRequest.SerializeToString,
            notification__pb2.Notification.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def NotifyTrendingPosts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/notification.NotificationService/NotifyTrendingPosts',
            notification__pb2.NotifyTrendingPostsRequest.SerializeToString,
            notification__pb2.NotifyTrendingPostsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
